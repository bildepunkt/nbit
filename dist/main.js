// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var Bitmap, Collection, Config, Game, Point, Scene, Sprite, Viewport, game, myConfig, myPoint, myScene, myViewport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Config = (function() {
    function Config(options) {
      var key;
      this.scale = 8;
      this.width = 800;
      this.height = 600;
      this.canvasId = 'canvas';
      for (key in options) {
        this[key] = options[key];
      }
    }

    return Config;

  })();

  Game = (function() {
    function Game(options) {
      this._deps = options;
      this._paused = false;
      this._scene = null;
      this._start();
    }

    Game.prototype._start = function() {
      this._update = this._update.bind(this);
      return this._update();
    };

    Game.prototype._update = function() {
      var entities, entity, j, len;
      if (this._paused) {
        return;
      }
      entities = this._deps.scene.getEntities();
      for (j = 0, len = entities.length; j < len; j++) {
        entity = entities[j];
        entity.render();
      }
      return requestAnimationFrame(this._update);
    };

    Game.prototype.pause = function(scene) {
      return this._paused = true;
    };

    Game.prototype.resume = function(scene) {
      return this._paused = false;
    };

    Game.prototype.setScene = function(scene) {
      return this._scene = scene;
    };

    return Game;

  })();

  Collection = (function() {
    function Collection() {
      this._items = [];
    }

    Collection.prototype.addItem = function(item) {
      return this._items.push(item);
    };

    Collection.prototype.getItems = function() {
      return this._items;
    };

    Collection.prototype.removeItem = function(target) {
      var i, item, j, len, ref, results;
      ref = this._items;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (target._uid === item._uid) {
          this._items.splice(i, 1);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Collection;

  })();

  Scene = (function() {
    function Scene(options) {
      this._deps = options;
      this._entities = new this._deps.Collection();
    }

    Scene.prototype.addEntity = function(entity) {
      return this._entities.addItem(entity);
    };

    Scene.prototype.removeEntity = function(entity) {
      return this._entities.removeItem(entity);
    };

    Scene.prototype.getEntities = function() {
      return this._entities.getItems();
    };

    return Scene;

  })();

  Viewport = (function() {
    function Viewport(options) {
      this._deps = options;
      this._canvas = document.getElementById(this._deps.config.canvasId);
      this._context = this._canvas.getContext('2d');
      this._canvas.width = this._deps.config.width;
      this._canvas.height = this._deps.config.height;
    }

    return Viewport;

  })();

  Sprite = (function() {
    function Sprite(options) {
      this._deps = options;
      this._x = 0;
      this._y = 0;
      this._dirty = true;
    }

    Sprite.prototype.set = function(key, val) {
      this._dirty = true;
      this['_' + key] = val;
      return this;
    };

    Sprite.prototype.get = function(key) {
      return this['_' + key];
    };

    Sprite.prototype.render = function() {
      if (!this._dirty) {
        return;
      }
      return this._dirty = false;
    };

    return Sprite;

  })();

  Bitmap = (function(superClass) {
    extend(Bitmap, superClass);

    function Bitmap(options) {
      Bitmap.__super__.constructor.call(this, options);
      this._deps = options;
      this._bitmap = null;
      this._legend = null;
    }

    Bitmap.prototype.render = function() {
      return Bitmap.__super__.render.call(this);
    };

    return Bitmap;

  })(Sprite);

  Point = (function(superClass) {
    extend(Point, superClass);

    function Point(options) {
      Point.__super__.constructor.call(this, options);
      this._deps = options;
    }

    Point.prototype.render = function() {
      Point.__super__.render.call(this);
      return this._deps.viewport._context.fillRect(this._x, this._y, this._deps.config.scale, this._deps.config.scale);
    };

    return Point;

  })(Sprite);


  /*
  ##
   * @class Line
   * @require Viewport
   * @require Config
   * @extend Sprite
   *
  class Line extends Sprite
      'use strict';
  
      var Line = function(options) {
          this._points = [];
      };
  
      Line.prototype = new Sprite(options);
  
      Line.prototype._bresenhamise = function(x0, y0, x1, y1) {
          var dx = Math.abs(x1 - x0);
          var sx = x0 < x1 ? 1 : -1;
          var dy = Math.abs(y1 - y0);
          var sy = y0 < y1 ? 1 : -1;
          var err = dx > dy ? dx : -dy / 2;
  
          var xTotal = Math.abs(x1 - x0);
          var yTotal = Math.abs(y1 - y0);
  
          while (xTotal >= 0 || yTotal >= 0) {
              this._drawPixel(x0, y0).bind(this);
  
              var e2 = err;
  
              if (e2 > -dx) {
                  err -= dy
                  x0 += sx
              }
  
              if (e2 < dy) {
                  err += dx
                  y0 += sy
              }
  
              xTotal--;
              yTotal--;
          }
      };
  
      Line.prototype._drawPixel = function(x, y) {
          this._viewport.context.drawRect(x, y, this._config.scale, this._config.scale);
      };
  
      Line.prototype.render = function() {
          var nextPt;
  
          for(var i = 0, len = this._points.length; i < len; i += 1) {
              nextPt = this._points[i + 1];
  
              if (typeof nextPt === 'object' && nextPt != null) {
                  this._bresenhamise(this._points[i], nextPt);
              }
          }
      };
  
      return Line;
  }());
  
  
  ##
   * @class Polygon
   * @require Viewport
   * @require Config
   * @extend Line
   *
  var Polygon = (function() {
      'use strict';
  
      var Polygon = function(options) {
          this._config = options.config
      };
  
      Polygon.prototype = new Line(options);
  
      Polygon.prototype.render = function() {
          var ctx = this._viewport.context;
          var nextPt;
          var i, len;
          
          ctx.beginPath();
          ctx.moveTo(this._points[0].x, this._points[0].y);
  
          for(i = 1, len = this._points.length; i < len; i += 1) {
              ctx.lineTo(this._points[0].x, this._points[0].y);
          }
  
          ctx.closePath();
          ctx.fill();
  
          for(i = 0, len = this._points.length; i < len; i += 1) {
              nextPt = this._points[i + 1];
  
              if (typeof nextPt === 'object' && nextPt != null) {
                  this._bresenhamise(this._points[i], nextPt);
              } else {
                  this._bresenhamise(this._points[i], this.points[0]);
              }
          }
      };
  
      return Polygon;
  }());
   */

  myConfig = new Config();

  myViewport = new Viewport({
    config: myConfig
  });

  myPoint = new Point({
    config: myConfig,
    viewport: myViewport
  });

  myScene = new Scene({
    Collection: Collection
  });

  myScene.addEntity(myPoint);

  game = new Game({
    scene: myScene
  });

}).call(this);
